import Component from '@ember/component';
import { computed, observer } from '@ember/object';
import layouts from 'typing-fights/keyboards/layouts';
import keyCodes from 'typing-fights/keyboards/codes';

export default Component.extend({
  tagName: '',
  keyCodes,
  labels: computed('language', 'layout', function () {
    return (new layouts[this.get('language')][this.get('layout')]()).labels;
  }),
  promptedState: {},
  lastSymbol: '',
  nextSymbolObserver: observer('textVisible', 'nextSymbolPosition', function () {
    const {
      nextSymbol: char,
      lastSymbol: lastChar,
    } = this.getProperties('nextSymbol', 'lastSymbol');

    this.clearHint(this.getCodes(lastChar));
    this.showHint(this.getCodes(char));
    this.set('lastSymbol', char);
  }),
  errorObserver: observer('error', function () {
    const error = this.get('error');
    if (error) {
      this.clearHint(this.getCodes(this.get('lastSymbol')));
    } else {
      this.showHint(this.getCodes(this.get('nextSymbol')));
    }
    this.set('promptedState.Backspace', error);
  }),
  clearHint(codes) {
    codes.forEach(code => this.set(`promptedState.${code}`, false));
  },
  showHint(codes) {
    codes.forEach(code => this.set(`promptedState.${code}`, true));
  },
  getCodes(char) {
    const {
      language: lang,
      charCode2CodesMap: charCodeMap,
    } = this.getProperties('language', 'charCode2CodesMap');

    const foreignCharCodeMap = this.get(`charCodesMap${lang.toUpperCase()}`) || {};
    const charCode = char.charCodeAt(0);
    const codes = charCode in foreignCharCodeMap ?
      charCodeMap[foreignCharCodeMap[charCode]] : charCodeMap[charCode];
    return typeof codes !== 'undefined' ? codes.split(' ') : [];
  },
  charCodesMapRU: {
    34: 64,
    44: 63,
    46: 47,
    47: 124,
    58: 94,
    59: 36,
    63: 38,
    1025: 126,
    1040: 70,
    1041: 60,
    1042: 68,
    1043: 85,
    1044: 76,
    1045: 84,
    1046: 58,
    1047: 80,
    1048: 66,
    1049: 81,
    1050: 82,
    1051: 75,
    1052: 86,
    1053: 89,
    1054: 74,
    1055: 71,
    1056: 72,
    1057: 67,
    1058: 78,
    1059: 69,
    1060: 65,
    1061: 123,
    1062: 87,
    1063: 88,
    1064: 73,
    1065: 79,
    1066: 125,
    1067: 83,
    1068: 77,
    1069: 34,
    1070: 62,
    1071: 90,
    1072: 102,
    1073: 44,
    1074: 100,
    1075: 117,
    1076: 108,
    1077: 116,
    1078: 59,
    1079: 112,
    1080: 98,
    1081: 113,
    1082: 114,
    1083: 107,
    1084: 118,
    1085: 121,
    1086: 106,
    1087: 103,
    1088: 104,
    1089: 99,
    1090: 110,
    1091: 101,
    1092: 97,
    1093: 91,
    1094: 119,
    1095: 120,
    1096: 105,
    1097: 111,
    1098: 93,
    1099: 115,
    1100: 109,
    1101: 39,
    1102: 46,
    1103: 122,
    1105: 96,
    8470: 35,
  },
  charCode2CodesMap: {
    32: 'Space',
    39: 'Quote',
    44: 'Comma',
    45: 'Minus',
    46: 'Period',
    47: 'Slash',
    48: 'Digit0',
    49: 'Digit1',
    50: 'Digit2',
    51: 'Digit3',
    52: 'Digit4',
    53: 'Digit5',
    54: 'Digit6',
    55: 'Digit7',
    56: 'Digit8',
    57: 'Digit9',
    59: 'Semicolon',
    61: 'Equal',
    91: 'BracketLeft',
    92: 'Backslash',
    93: 'BracketRight',
    96: 'Backquote',
    97: 'KeyA',
    98: 'KeyB',
    99: 'KeyC',
    100: 'KeyD',
    101: 'KeyE',
    102: 'KeyF',
    103: 'KeyG',
    104: 'KeyH',
    105: 'KeyI',
    106: 'KeyJ',
    107: 'KeyK',
    108: 'KeyL',
    109: 'KeyM',
    110: 'KeyN',
    111: 'KeyO',
    112: 'KeyP',
    113: 'KeyQ',
    114: 'KeyR',
    115: 'KeyS',
    116: 'KeyT',
    117: 'KeyU',
    118: 'KeyV',
    119: 'KeyW',
    120: 'KeyX',
    121: 'KeyY',
    122: 'KeyZ',
    33: 'ShiftRight Digit1',
    34: 'ShiftLeft Quote',
    35: 'ShiftRight Digit3',
    36: 'ShiftRight Digit4',
    37: 'ShiftRight Digit5',
    38: 'ShiftLeft Digit7',
    40: 'ShiftLeft Digit9',
    41: 'ShiftLeft Digit0',
    42: 'ShiftLeft Digit8',
    43: 'ShiftLeft Equal',
    58: 'ShiftLeft Semicolon',
    60: 'ShiftLeft Comma',
    62: 'ShiftLeft Period',
    63: 'ShiftLeft Slash',
    64: 'ShiftRight Digit2',
    65: 'ShiftRight KeyA',
    66: 'ShiftRight KeyB',
    67: 'ShiftRight KeyC',
    68: 'ShiftRight KeyD',
    69: 'ShiftRight KeyE',
    70: 'ShiftRight KeyF',
    71: 'ShiftRight KeyG',
    72: 'ShiftLeft KeyH',
    73: 'ShiftLeft KeyI',
    74: 'ShiftLeft KeyJ',
    75: 'ShiftLeft KeyK',
    76: 'ShiftLeft KeyL',
    77: 'ShiftLeft KeyM',
    78: 'ShiftLeft KeyN',
    79: 'ShiftLeft KeyO',
    80: 'ShiftLeft KeyP',
    81: 'ShiftRight KeyQ',
    82: 'ShiftRight KeyR',
    83: 'ShiftRight KeyS',
    84: 'ShiftRight KeyT',
    85: 'ShiftLeft KeyU',
    86: 'ShiftRight KeyV',
    87: 'ShiftRight KeyW',
    88: 'ShiftRight KeyX',
    89: 'ShiftLeft KeyY',
    90: 'ShiftRight KeyZ',
    94: 'ShiftLeft Digit6',
    95: 'ShiftLeft Minus',
    123: 'ShiftLeft BracketLeft',
    124: 'ShiftLeft Backslash',
    125: 'ShiftLeft BracketRight',
    126: 'ShiftRight Backquote',
  },
});
